#!/usr/bin/env python
from __future__ import print_function

import os
import shutil
import subprocess
import tempfile
from os import path

WORKSPACE_TEMPLATE_PREFIX = '''
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

rules_jvm_external_version = "9503caa708227b5ec75237a59a3827c4a2f4070a" # branch master

http_archive(
    name = "rules_jvm_external",
    sha256 = "f2daf13a1607e9e60cc00ba8b686592f0eae3de4fa63a8fdc9b73063841a3605",
    strip_prefix = "rules_jvm_external-%s" % rules_jvm_external_version,
    url = "https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip" % rules_jvm_external_version,
)

rules_go_version = "a667c18bef6ec5a11f1cbf40b219d541c48e942e"  # branch master

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "03fe1d6c9a5b8c554170e9a618101d7b5e07e7f638ccd45d5cd6ae9a44b32123",
    strip_prefix = "rules_go-%s" % rules_go_version,
    urls = ["https://github.com/bazelbuild/rules_go/archive/%s.zip" % rules_go_version],
)

rules_scala_version = "886bc9cf6d299545510b39b4872bbb5dc7526cb3"  # branch master

http_archive(
    name = "io_bazel_rules_scala",
    sha256 = "4fdf8506af2e2f1c32605b1f1d20928370640948aa144ef97b8e3bf77404320c",
    strip_prefix = "rules_scala-%s" % rules_scala_version,
    urls = ["https://github.com/bazelbuild/rules_scala/archive/%s.zip" % rules_scala_version],
)
'''

WORKSPACE_TEMPLATE_SUFFIX = '''
load("@io_bazel_rules_go//go:deps.bzl", "go_rules_dependencies", "go_register_toolchains")

go_rules_dependencies()

go_register_toolchains()

load("@io_bazel_rules_scala//scala:scala.bzl", "scala_repositories")

scala_repositories()

load("@io_bazel_rules_scala//scala:toolchains.bzl", "scala_register_toolchains")

scala_register_toolchains()
'''


def main():
    d = tempfile.mkdtemp()
    try:
        commit_sha = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip().decode('utf-8')

        with open(path.join(d, 'WORKSPACE'), 'w') as f:
            f.write(WORKSPACE_TEMPLATE_PREFIX)
            f.writelines([
                'spotify_bazel_tools_version="{}"\n'.format(commit_sha),
                '\n',
                'http_archive(\n',
                '    name = "spotify_bazel_tools",\n',
                '    strip_prefix = "bazel-tools-%s" % (spotify_bazel_tools_version),\n',
                '    urls = ["https://github.com/spotify/bazel-tools/archive/%s.zip" % '
                '(spotify_bazel_tools_version,)],\n',
                ')\n',
                '\n',
                'load("@spotify_bazel_tools//:tools.bzl", "bazel_tools_repositories")\n',
                'bazel_tools_repositories()\n',
                'load("@spotify_bazel_tools//3rdparty:repositories.bzl", "repositories")\n',
                'repositories()\n',
                'load("@spotify_bazel_tools//3rdparty:workspace.bzl", "maven_dependencies")\n',
                'maven_dependencies()\n',
            ])
            f.write(WORKSPACE_TEMPLATE_SUFFIX)

        subprocess.check_call(['bazel', 'build', '@spotify_bazel_tools//...'], cwd=d)

        third_party_dir = path.join(d, '3rdparty')
        os.mkdir(third_party_dir)

        shutil.copyfile(path.join('3rdparty', 'dependencies.yaml'), path.join(third_party_dir, 'dependencies.yaml'))
        shutil.copyfile(path.join('3rdparty', 'maven-install.json'), path.join(third_party_dir, 'maven-install.json'))
        subprocess.check_call(['bazel', 'run', '@spotify_bazel_tools//sync-deps', '--', '-w', d], cwd=d)
        subprocess.check_call(['bazel', 'run', '@spotify_bazel_tools//format', '--', '-w', d], cwd=d)
    finally:
        subprocess.check_call(['bazel', 'shutdown'], cwd=d)
        shutil.rmtree(d)


if __name__ == '__main__':
    main()
